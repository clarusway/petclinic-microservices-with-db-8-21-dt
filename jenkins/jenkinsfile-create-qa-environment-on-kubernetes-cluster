pipeline {
    agent any
    environment {
        PATH=sh(script:"echo $PATH:/usr/local/bin", returnStdout:true).trim()
        APP_NAME="petclinic"
        AWS_REGION="us-east-1"
        CFN_KEYPAIR="matt-${APP_NAME}-qa.key"
        ANSIBLE_PRIVATE_KEY_FILE="${JENKINS_HOME}/.ssh/${CFN_KEYPAIR}"
        ANSIBLE_HOST_KEY_CHECKING="False"
    }
    stages {
        stage('Create QA Automation Infrastructure') {
            steps {
                echo "Update main.tf file for key-pair"
                sh "sed -i 's/mattkey/${CFN_KEYPAIR}/g' /var/lib/jenkins/workspace/create-qa-environment-on-kubernetes-cluster/infrastructure/qa-k8s-terraform/main.tf"
                sh "cat ${WORKSPACE}/infrastructure/qa-k8s-terraform/main.tf"
                echo 'Creating QA Automation Infrastructure for Dev Environment with Terraform'
                sh """
                cd ${WORKSPACE}/infrastructure/qa-k8s-terraform
                terraform init
                terraform apply -auto-approve
                """

                script {
                    while(true) {
                        echo "Master Instance is not UP and running yet. Will try to reach again after 10 seconds..."
                        sleep(10)

                        ip = sh(script:"aws ec2 describe-instances --region ${AWS_REGION} --filters Name=tag-value,Values=kube-master Name=tag-value,Values=tera-kube-ans --query Reservations[*].Instances[*].[PublicIpAddress] --output text | grep -v None", returnStdout:true).trim()

                        if (ip.length() >= 7) {
                            echo "Kube Master Public Ip Address Found: $ip"
                            env.GRAND_MASTER_PUBLIC_IP = "$ip"
                            break
                        }
                    }
                    while(true) {
                        try{
                            sh "ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i ${JENKINS_HOME}/.ssh/${CFN_KEYPAIR} ubuntu@${GRAND_MASTER_PUBLIC_IP} hostname"
                            echo "Kube Master is reachable with SSH."
                            break
                        }
                        catch(Exception){
                            echo "Could not connect to Kube Grand Master with SSH, I will try again in 10 seconds"
                            sleep(10)
                        }
                    }
                }
            }
        }

        stage('Create Kubernetes Cluster for QA Automation Build') {
            steps {
                echo "Setup Kubernetes Cluster for QA Automation Build for ${APP_NAME} App"
                sh "ansible-playbook -i ${WORKSPACE}/ansible/inventory/dev_stack_dynamic_inventory_aws_ec2.yaml ${WORKSPACE}/ansible/playbooks/k8s_setup.yaml"
            }
        }
      }

    post {
        failure {
            echo 'Tear down the Kubernetes Cluster infrastructure'
            sh """
            cd ${WORKSPACE}/infrastructure/qa-k8s-terraform
            terraform destroy -auto-approve
            """
        }
    }
}